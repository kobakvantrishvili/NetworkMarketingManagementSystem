// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetworkMarketingManagementSystem.Persistence.MSSQL;

#nullable disable

namespace NetworkMarketingManagementSystem.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NetworkMarketingManagementSystem.Domain.ForDistributor.Distributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(MAX)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("References")
                        .HasColumnType("int");

                    b.Property<int?>("ReferredBy")
                        .HasColumnType("int");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Distributor", (string)null);
                });

            modelBuilder.Entity("NetworkMarketingManagementSystem.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("NetworkMarketingManagementSystem.Domain.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DistributorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("date");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.ToTable("Sale", (string)null);
                });

            modelBuilder.Entity("NetworkMarketingManagementSystem.Domain.SaleProduct", b =>
                {
                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductSinglePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProductTotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SaleId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("SaleProduct", (string)null);
                });

            modelBuilder.Entity("NetworkMarketingManagementSystem.Domain.ForDistributor.Distributor", b =>
                {
                    b.OwnsOne("NetworkMarketingManagementSystem.Domain.ForDistributor.AddressInfo", "AddressInfo", b1 =>
                        {
                            b1.Property<int>("DistributorId")
                                .HasColumnType("int");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(100)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("DistributorId");

                            b1.ToTable("AddressInfo", "Distributor");

                            b1.WithOwner("Distributor")
                                .HasForeignKey("DistributorId");

                            b1.Navigation("Distributor");
                        });

                    b.OwnsOne("NetworkMarketingManagementSystem.Domain.ForDistributor.ContactInfo", "ContactInfo", b1 =>
                        {
                            b1.Property<int>("DistributorId")
                                .HasColumnType("int");

                            b1.Property<string>("Contact")
                                .IsRequired()
                                .HasMaxLength(100)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("DistributorId");

                            b1.ToTable("ContactInfo", "Distributor");

                            b1.WithOwner("Distributor")
                                .HasForeignKey("DistributorId");

                            b1.Navigation("Distributor");
                        });

                    b.OwnsOne("NetworkMarketingManagementSystem.Domain.ForDistributor.IdentityDocument", "IdentityDocument", b1 =>
                        {
                            b1.Property<int>("DistributorId")
                                .HasColumnType("int");

                            b1.Property<string>("IssuingAgency")
                                .HasMaxLength(100)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Number")
                                .HasMaxLength(10)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("PersonalNumber")
                                .IsRequired()
                                .HasMaxLength(50)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<DateTime>("ReleaseDate")
                                .HasColumnType("date");

                            b1.Property<string>("Series")
                                .HasMaxLength(10)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.Property<DateTime>("ValidUntil")
                                .HasColumnType("date");

                            b1.HasKey("DistributorId");

                            b1.ToTable("IdentityDocument", "Distributor");

                            b1.WithOwner("Distributor")
                                .HasForeignKey("DistributorId");

                            b1.Navigation("Distributor");
                        });

                    b.Navigation("AddressInfo")
                        .IsRequired();

                    b.Navigation("ContactInfo")
                        .IsRequired();

                    b.Navigation("IdentityDocument")
                        .IsRequired();
                });

            modelBuilder.Entity("NetworkMarketingManagementSystem.Domain.Sale", b =>
                {
                    b.HasOne("NetworkMarketingManagementSystem.Domain.ForDistributor.Distributor", "Distributor")
                        .WithMany("Sales")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Distributor");
                });

            modelBuilder.Entity("NetworkMarketingManagementSystem.Domain.SaleProduct", b =>
                {
                    b.HasOne("NetworkMarketingManagementSystem.Domain.Product", "Product")
                        .WithMany("SaleProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NetworkMarketingManagementSystem.Domain.Sale", "Sale")
                        .WithMany("SaleProducts")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("NetworkMarketingManagementSystem.Domain.ForDistributor.Distributor", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("NetworkMarketingManagementSystem.Domain.Product", b =>
                {
                    b.Navigation("SaleProducts");
                });

            modelBuilder.Entity("NetworkMarketingManagementSystem.Domain.Sale", b =>
                {
                    b.Navigation("SaleProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
